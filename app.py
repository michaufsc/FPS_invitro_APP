import streamlit as st
import pandas as pd
import numpy as np
from scipy.integrate import simps
from io import BytesIO
import matplotlib.pyplot as plt
from datetime import datetime

## Configura√ß√µes da P√°gina
st.set_page_config(
    page_title="An√°lise de Fotoprote√ß√£o UV Precisa",
    page_icon="‚òÄÔ∏è",
    layout="wide"
)

## T√≠tulo e Descri√ß√£o
st.title("‚òÄÔ∏è An√°lise Cient√≠fica de Fotoprote√ß√£o UV")
st.markdown("""
Aplicativo para c√°lculo preciso de par√¢metros de fotoprote√ß√£o conforme m√©todos internacionais.
""")

## =============================================
## CONSTANTES E ESPECTROS DE REFER√äNCIA
## =============================================

# Faixas espectrais (nm)
UVB_RANGE = (290, 320)
UVA2_RANGE = (320, 340)
UVA1_RANGE = (340, 400)
ULTRALONG_UVA_RANGE = (370, 400)
FULL_RANGE = (290, 400)

# Espectro de eritema (CIE 1998)
def erythema_action_spectrum(wavelength):
    return 10**(0.094*(298-wavelength)) if wavelength <= 298 else 1.0

# Espectro UVA (ISO 24443)
def uva_action_spectrum(wavelength):
    return 1.0 if (wavelength >= 320) and (wavelength <= 400) else 0.0

# Fator de normaliza√ß√£o
K_ERITEMA = 1.0  # Ajustar conforme calibra√ß√£o

## =============================================
## FUN√á√ïES DE C√ÅLCULO PRECISAS
## =============================================

def calculate_spf(wavelengths, absorbance):
    """C√°lculo preciso do SPF com espectro de eritema"""
    mask = (wavelengths >= UVB_RANGE[0]) & (wavelengths <= UVB_RANGE[1])
    er = np.array([erythema_action_spectrum(w) for w in wavelengths[mask]])
    transmittance = 10**(-absorbance[mask])  # Transmit√¢ncia = 10^-absorbance
    spf = simps(er * transmittance, wavelengths[mask])
    return K_ERITEMA / spf if spf > 0 else 0

def calculate_uva_pf(wavelengths, absorbance):
    """C√°lculo do UVA-PF conforme ISO 24443"""
    mask = (wavelengths >= UVA2_RANGE[0]) & (wavelengths <= UVA1_RANGE[1])
    uva = np.array([uva_action_spectrum(w) for w in wavelengths[mask]])
    transmittance = 10**(-absorbance[mask])
    return simps(uva * transmittance, wavelengths[mask]) * 10  # Fator 10 conforme norma

def calculate_uva1_pf(wavelengths, absorbance):
    """C√°lculo UVA1-PF (340-400nm) conforme HPC Today"""
    mask = (wavelengths >= UVA1_RANGE[0]) & (wavelengths <= UVA1_RANGE[1])
    return np.mean(10**(-absorbance[mask])) * 10  # M√©dia de transmit√¢ncia

def calculate_lambda_c(wavelengths, absorbance):
    """C√°lculo preciso do Œªc com interpola√ß√£o"""
    transmittance = 10**(-absorbance)
    total_area = simps(transmittance, wavelengths)
    cumulative = np.cumsum(transmittance * np.gradient(wavelengths))
    return np.interp(0.9*total_area, cumulative, wavelengths)

def calculate_uv_ratio(uva_pf, spf):
    """C√°lculo da raz√£o UVA/UVB"""
    return uva_pf / spf if spf > 0 else 0

## =============================================
## INTERFACE DO USU√ÅRIO
## =============================================

with st.expander("üì§ Upload de Arquivo", expanded=True):
    uploaded_file = st.file_uploader(
        "Carregue seu arquivo de dados espectrais (CSV ou Excel)",
        type=['csv', 'xlsx'],
        help="""O arquivo deve conter duas colunas:
        1. wavelength (comprimento de onda em nm)
        2. absorbance (valores de absorb√¢ncia)"""
    )

    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            
            # Verificar e padronizar colunas
            df.columns = [col.lower().strip() for col in df.columns]
            
            if not {'wavelength', 'absorbance'}.issubset(df.columns):
                st.error("Erro: O arquivo deve conter colunas 'wavelength' e 'absorbance'")
            else:
                # Pr√©-processamento
                df = df[['wavelength', 'absorbance']].dropna()
                df = df.sort_values('wavelength')
                wavelengths = df['wavelength'].values
                absorbance = df['absorbance'].values
                
                # Verificar intervalo espectral
                if wavelengths.min() > 290 or wavelengths.max() < 400:
                    st.warning("Dados n√£o cobrem todo o espectro UV (290-400 nm). Resultados podem ser imprecisos.")
                
                # C√°lculos
                results = {
                    'SPF': calculate_spf(wavelengths, absorbance),
                    'UVA-PF': calculate_uva_pf(wavelengths, absorbance),
                    'UVA1-PF': calculate_uva1_pf(wavelengths, absorbance),
                    'Œªc (nm)': calculate_lambda_c(wavelengths, absorbance),
                    'Raz√£o UVA/UVB': calculate_uv_ratio(
                        calculate_uva_pf(wavelengths, absorbance),
                        calculate_spf(wavelengths, absorbance)
                    ),
                    'Dados': df
                }
                
                st.session_state.results = results
                st.success("An√°lise conclu√≠da com sucesso!")
                
        except Exception as e:
            st.error(f"Erro ao processar arquivo: {str(e)}")

## =============================================
## VISUALIZA√á√ÉO DOS RESULTADOS
## =============================================

if 'results' in st.session_state:
    st.markdown("## üìä Resultados Cient√≠ficos")
    
    cols = st.columns(3)
    with cols[0]:
        st.metric("SPF (290-320 nm)", 
                f"{st.session_state.results['SPF']:.1f}",
                help="Fator de Prote√ß√£o Solar (ISO 24443)")
    with cols[1]:
        st.metric("UVA-PF (320-400 nm)", 
                f"{st.session_state.results['UVA-PF']:.1f}",
                help="Fator de Prote√ß√£o UVA (ISO 24443)")
    with cols[2]:
        st.metric("UVA1-PF (340-400 nm)", 
                f"{st.session_state.results['UVA1-PF']:.1f}",
                help="Prote√ß√£o UVA1 (HPC Today)")
    
    cols = st.columns(3)
    with cols[0]:
        st.metric("Œªc (Comprimento Cr√≠tico)", 
                f"{st.session_state.results['Œªc (nm)']:.1f} nm",
                help="Comprimento onde 90% da absorb√¢ncia est√° acumulada")
    with cols[1]:
        st.metric("Raz√£o UVA/UVB", 
                f"{st.session_state.results['Raz√£o UVA/UVB']:.2f}",
                help="Balanceamento de prote√ß√£o UVA/UVB")
    
    st.markdown("### üìà Visualiza√ß√£o Espectral")
    fig, ax = plt.subplots(figsize=(10, 5))
    
    # Curva de absorb√¢ncia
    ax.plot(st.session_state.results['Dados']['wavelength'], 
            st.session_state.results['Dados']['absorbance'],
            'b-', linewidth=2, label='Absorb√¢ncia')
    
    # Regi√µes destacadas
    ax.axvspan(*UVB_RANGE, color='red', alpha=0.1, label='UVB')
    ax.axvspan(*UVA2_RANGE, color='orange', alpha=0.1, label='UVA2')
    ax.axvspan(*UVA1_RANGE, color='yellow', alpha=0.1, label='UVA1')
    ax.axvline(st.session_state.results['Œªc (nm)'], color='green', 
              linestyle='--', label=f'Œªc ({st.session_state.results["Œªc (nm)"]:.1f} nm)')
    
    ax.set_xlabel('Comprimento de Onda (nm)')
    ax.set_ylabel('Absorb√¢ncia')
    ax.set_title('Perfil Espectral de Absorb√¢ncia UV')
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)

## =============================================
## EXPORTA√á√ÉO DE RESULTADOS
## =============================================

if 'results' in st.session_state:
    st.markdown("## üíæ Exportar Resultados")
    
    # Preparar dados para exporta√ß√£o
    df_results = pd.DataFrame({
        'Par√¢metro': ['SPF', 'UVA-PF', 'UVA1-PF', 'Œªc (nm)', 'Raz√£o UVA/UVB'],
        'Valor': [
            st.session_state.results['SPF'],
            st.session_state.results['UVA-PF'],
            st.session_state.results['UVA1-PF'],
            st.session_state.results['Œªc (nm)'],
            st.session_state.results['Raz√£o UVA/UVB']
        ],
        'Descri√ß√£o': [
            'Fator de Prote√ß√£o Solar (290-320 nm)',
            'Fator de Prote√ß√£o UVA (320-400 nm)',
            'Fator de Prote√ß√£o UVA1 (340-400 nm)',
            'Comprimento de onda cr√≠tico (90% √°rea acumulada)',
            'Raz√£o entre prote√ß√£o UVA e UVB'
        ],
        'M√©todo': [
            'ISO 24443 com espectro de eritema',
            'ISO 24443 com espectro UVA',
            'M√©dia de transmit√¢ncia (HPC Today)',
            'Integral da transmit√¢ncia',
            'Raz√£o UVA-PF/SPF'
        ]
    })
    
    # Bot√£o de exporta√ß√£o
    if st.button("Gerar Relat√≥rio Cient√≠fico"):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            # Resultados
            df_results.to_excel(writer, sheet_name='Resultados', index=False)
            
            # Dados brutos
            st.session_state.results['Dados'].to_excel(
                writer, sheet_name='Dados Espectrais', index=False)
            
            # M√©todos
            methods = pd.DataFrame({
                'M√©todo': [
                    'SPF',
                    'UVA-PF',
                    'UVA1-PF',
                    'Œªc'
                ],
                'F√≥rmula': [
                    r'$\frac{K}{\int_{290}^{320} E(\lambda) \cdot T(\lambda) d\lambda}$',
                    r'$10 \cdot \int_{320}^{400} T(\lambda) d\lambda$',
                    r'$10 \cdot \overline{T}_{340-400}$',
                    r'$\lambda_c : \int_{290}^{\lambda_c} T(\lambda) d\lambda = 0.9 \cdot \int_{290}^{400} T(\lambda) d\lambda$'
                ],
                'Refer√™ncia': [
                    'ISO 24443',
                    'ISO 24443',
                    'HPC Today 3(2024)',
                    'ISO 24443'
                ]
            })
            methods.to_excel(writer, sheet_name='M√©todos', index=False)
            
            # Formata√ß√£o
            workbook = writer.book
            for sheet in ['Resultados', 'Dados Espectrais', 'M√©todos']:
                worksheet = writer.sheets[sheet]
                worksheet.set_column('A:A', 20)
                worksheet.set_column('B:B', 15)
                worksheet.set_column('C:C', 40)
            
        st.download_button(
            label="‚¨áÔ∏è Baixar Relat√≥rio Completo (Excel)",
            data=output.getvalue(),
            file_name=f"relatorio_fotoprotecao_{datetime.now().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

## =============================================
## SE√á√ÉO DE INFORMA√á√ïES T√âCNICAS
## =============================================

with st.expander("üìö Fundamentos Cient√≠ficos", expanded=False):
    st.markdown("""
    ### **M√©todos de C√°lculo**
    
    1. **SPF (Fator de Prote√ß√£o Solar)**
       - Faixa: 290-320 nm
       - F√≥rmula:
         $$
         SPF = \\frac{K_{eritema}}{\int_{290}^{320} E(\lambda) \cdot T(\lambda) d\lambda}
         $$
       - Onde:
         - $E(\lambda)$: Espectro de a√ß√£o eritemat√≥gena (CIE 1998)
         - $T(\lambda) = 10^{-A(\lambda)}$: Transmit√¢ncia
    
    2. **UVA-PF (Fator de Prote√ß√£o UVA)**
       - Faixa: 320-400 nm
       - F√≥rmula:
         $$
         UVA\\text{-}PF = 10 \cdot \int_{320}^{400} T(\lambda) d\lambda
         $$
    
    3. **UVA1-PF (340-400 nm)**
       - M√©todo simplificado:
         $$
         UVA1\\text{-}PF = 10 \cdot \overline{T}_{340-400}
         $$
    
    4. **Comprimento de Onda Cr√≠tico (Œªc)**
       - Ponto onde 90% da √°rea da transmit√¢ncia est√° acumulada
    
    ### **Requisitos dos Dados**
    - Intervalo espectral: 290-400 nm
    - Resolu√ß√£o recomendada: ‚â§5 nm
    - Unidades:
      - Comprimento de onda: nm
      - Absorb√¢ncia: adimensional (0-3)
    """)

with st.expander("‚ö†Ô∏è Boas Pr√°ticas", expanded=False):
    st.markdown("""
    - **Prepara√ß√£o da Amostra:**
      - Utilizar substrato adequado (ex: PMMA)
      - Aplicar quantidade padronizada (2 mg/cm¬≤)
    
    - **Medi√ß√£o Espectral:**
      - Calibrar o espectrofot√¥metro regularmente
      - Realizar varreduras em triplicata
    
    - **Interpreta√ß√£o:**
      - Œªc > 370 nm indica boa prote√ß√£o UVA
      - Raz√£o UVA/UVB > 1/3 para prote√ß√£o balanceada
    """)

## Rodap√©
st.markdown("---")
st.markdown("""
**Aplicativo Cient√≠fico** ‚ãÖ M√©todos validados conforme ISO 24443 e HPC Today 3(2024)  
Desenvolvido para an√°lise precisa de fotoprote√ß√£o UV ‚ãÖ [Refer√™ncia Completa](https://tks-hpc.h5mag.com/hpc_today_3_2024/sun_care_-_in_vitro_method_for_uva1_long_uva_or_ultra-long_uva_claiming_a_study_based_on_several_sunscreen_products)
""")
