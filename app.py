import streamlit as st

# Configura√ß√£o da p√°gina DEVE SER A PRIMEIRA INSTRU√á√ÉO
st.set_page_config(
    page_title="An√°lise de Prote√ß√£o Solar",
    page_icon="üåû",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Agora os outros imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as opt
from datetime import datetime

# Verificar e importar Plotly com fallback
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

# Sistema de sess√£o para armazenar dados
if 'uploaded_data' not in st.session_state:
    st.session_state.uploaded_data = {
        'pre_irrad': None,
        'post_irrad': None,
        'metadata': {}
    }

if 'analysis_history' not in st.session_state:
    st.session_state.analysis_history = []

# Fun√ß√£o para mapear nomes de colunas - CORRIGIDA
def map_column_names(df):
    """Mapeia nomes de colunas para um formato padr√£o"""
    column_mapping = {}
    
    # Mapear comprimento de onda - CORRE√á√ÉO PRINCIPAL
    for col in df.columns:
        lower_col = col.lower().strip()
        # Verifica v√°rias possibilidades
        if any(word in lower_col for word in ['comprimento', 'onda', 'wavelength', 'lambda', 'nm']):
            column_mapping[col] = 'Comprimento de Onda'
            break
    else:
        # Se n√£o encontrou, usa a primeira coluna
        column_mapping[df.columns[0]] = 'Comprimento de Onda'
    
    # Mapear absorb√¢ncia
    for col in df.columns:
        lower_col = col.lower().strip()
        if any(word in lower_col for word in ['absorbancia', 'absorvancia', 'absorb√¢ncia', 'absorv√¢ncia', 'abs']):
            column_mapping[col] = 'A0i(Œª)'
            break
    
    # Mapear E(Œª)
    for col in df.columns:
        lower_col = col.lower().strip()
        if any(word in lower_col for word in ['e(Œª)', 'e(lambda)', 'eritema', 'erythema', 'e(']):
            column_mapping[col] = 'E(Œª)'
            break
    
    # Mapear I(Œª)
    for col in df.columns:
        lower_col = col.lower().strip()
        if any(word in lower_col for word in ['i(Œª)', 'i(lambda)', 'intensidade', 'intensity', 'i(']):
            column_mapping[col] = 'I(Œª)'
            break
    
    return column_mapping

# Fun√ß√µes de c√°lculo
def calculate_spf(df):
    """Calcula SPF in vitro conforme Equa√ß√£o 1"""
    d_lambda = 1
    E = df['E(Œª)'].to_numpy()
    I = df['I(Œª)'].to_numpy()
    A0i = df['A0i(Œª)'].to_numpy()
    T = 10 ** (-A0i)
    
    numerator = np.sum(E * I * d_lambda)
    denominator = np.sum(E * I * T * d_lambda)
    
    if denominator == 0:
        raise ValueError("Denominator cannot be zero")
    return numerator / denominator

def calculate_adjusted_spf(df, C):
    """Calcula SPF ajustado conforme Equa√ß√£o 2"""
    d_lambda = 1
    E = df['E(Œª)'].to_numpy()
    I = df['I(Œª)'].to_numpy()
    A0i = df['A0i(Œª)'].to_numpy()
    
    numerator = np.sum(E * I * d_lambda)
    denominator = np.sum(E * I * (10 ** (-A0i * C)) * d_lambda)
    
    if denominator == 0:
        raise ValueError("Denominator cannot be zero")
    return numerator / denominator

def calculate_uva_pf(df, C):
    """Calcula UVA-PF"""
    d_lambda = 1
    P = df['P(Œª)'].to_numpy()
    I = df['I(Œª)'].to_numpy()
    A0i = df['A0i(Œª)'].to_numpy()
    
    numerator = np.sum(P * I * d_lambda)
    denominator = np.sum(P * I * (10 ** (-A0i * C)) * d_lambda)
    
    if denominator == 0:
        raise ValueError("Denominator cannot be zero")
    return numerator / denominator

def calculate_critical_wavelength(df):
    """Calcula Critical Wavelength"""
    df_uv = df[(df['Comprimento de Onda'] >= 290) & 
              (df['Comprimento de Onda'] <= 400)].copy()
    
    wavelengths = df_uv['Comprimento de Onda'].to_numpy()
    absorbance = df_uv['A0i(Œª)'].to_numpy()
    
    total_area = np.trapz(absorbance, wavelengths)
    target_area = 0.9 * total_area
    
    cumulative_area = 0
    for i, (wl, abs_val) in enumerate(zip(wavelengths, absorbance)):
        if i == 0:
            continue
        segment_area = (abs_val + absorbance[i-1])/2 * (wl - wavelengths[i-1])
        cumulative_area += segment_area
        
        if cumulative_area >= target_area:
            return wl
    
    return 400

# Fun√ß√£o para carregar e validar dados - CORRIGIDA
def load_and_validate_data(uploaded_file, data_type="pre_irradiation"):
    """Carrega e valida os dados do arquivo com mapeamento de colunas"""
    try:
        if uploaded_file.name.endswith('xlsx'):
            df = pd.read_excel(uploaded_file)
        else:
            df = pd.read_csv(uploaded_file)
        
        # Mostrar colunas originais
        st.write("üîç **Colunas originais:**", list(df.columns))
        
        # Mapear nomes de colunas
        column_mapping = map_column_names(df)
        st.write("üîÑ **Mapeamento:**", column_mapping)
        
        df = df.rename(columns=column_mapping)
        st.write("‚úÖ **Colunas ap√≥s mapeamento:**", list(df.columns))
        
        # Verificar se todas as colunas necess√°rias est√£o presentes
        if data_type == "pre_irradiation":
            required_cols = ['Comprimento de Onda', 'E(Œª)', 'I(Œª)', 'A0i(Œª)']
        else:
            required_cols = ['Comprimento de Onda', 'P(Œª)', 'I(Œª)', 'Ai(Œª)']
            
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            raise ValueError(f"Colunas faltando: {', '.join(missing_cols)}")
            
        return df, None
        
    except Exception as e:
        return None, str(e)

# Fun√ß√£o para salvar an√°lise no hist√≥rico
def save_to_history(analysis_name, results, timestamp):
    """Salva os resultados da an√°lise no hist√≥rico"""
    st.session_state.analysis_history.append({
        'name': analysis_name,
        'results': results,
        'timestamp': timestamp,
        'data_preview': {
            'spf': results.get('spf', 0),
            'spf_adjusted': results.get('spf_adjusted', 0),
            'C_value': results.get('C_value', 0)
        }
    })
    
    # Manter apenas as √∫ltimas 10 an√°lises
    if len(st.session_state.analysis_history) > 10:
        st.session_state.analysis_history.pop(0)

# Fun√ß√£o para criar gr√°ficos avan√ßados
def create_advanced_plots(df, plot_type="absorbance"):
    """Cria visualiza√ß√µes avan√ßadas dos dados"""
    fig, ax = plt.subplots(figsize=(12, 6))
    
    if plot_type == "absorbance":
        ax.plot(df['Comprimento de Onda'], df['A0i(Œª)'], 
               label='Absorb√¢ncia', linewidth=2.5, color='#1f77b4')
        ax.set_ylabel('Absorb√¢ncia')
        ax.set_title("Espectro de Absorb√¢ncia")
        
    elif plot_type == "weighting_functions":
        # Absorb√¢ncia
        ax.plot(df['Comprimento de Onda'], df['A0i(Œª)'], 
               label='Absorb√¢ncia', linewidth=2.5, color='#1f77b4')
        
        # E(Œª) - normalizado para visualiza√ß√£o
        if 'E(Œª)' in df.columns:
            e_normalized = df['E(Œª)'] / df['E(Œª)'].max() * df['A0i(Œª)'].max() * 0.8
            ax.plot(df['Comprimento de Onda'], e_normalized, 
                   label='E(Œª) - Eritema (normalizado)', linewidth=1.5, color='#ff7f0e', linestyle='--')
        
        # I(Œª) - normalizado para visualiza√ß√£o  
        if 'I(Œª)' in df.columns:
            i_normalized = df['I(Œª)'] / df['I(Œª)'].max() * df['A0i(Œª)'].max() * 0.6
            ax.plot(df['Comprimento de Onda'], i_normalized,
                   label='I(Œª) - Intensidade (normalizado)', linewidth=1.5, color='#2ca02c', linestyle=':')
        
        ax.set_ylabel('Valores Normalizados')
        ax.set_title("Espectro de Absorb√¢ncia e Fun√ß√µes de Pondera√ß√£o")
    
    ax.set_xlabel('Comprimento de Onda (nm)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    return fig

# LOGOS NO TOPO
col1, col2 = st.columns([1, 0.5])
with col1:
    st.image("https://via.placeholder.com/200x80/FF9900/000000?text=MEU+LAB", width=200)
with col2:
    st.image("https://via.placeholder.com/200x80/0066CC/FFFFFF?text=UFSC", width=200)

# T√çTULO PRINCIPAL
st.title("üåû An√°lise Completa de Prote√ß√£o Solar")

# Menu lateral para navega√ß√£o
with st.sidebar:
    st.image("https://via.placeholder.com/150x50/FF9900/000000?text=LOGO", width=150)
    st.title("Navega√ß√£o")
    page = st.radio("Selecione a p√°gina:", 
                   ["C√°lculo SPF", "An√°lise UVA", "M√©tricas Avan√ßadas", "Comparativo", "Explica√ß√£o das Equa√ß√µes"])
    
    st.markdown("---")
    st.info("""
    **Instru√ß√µes:**
    1. Fa√ßa upload dos dados
    2. Configure os par√¢metros
    3. Visualize os resultados
    """)
    
    # Avisos de depend√™ncias
    if not PLOTLY_AVAILABLE:
        st.warning("Plotly n√£o est√° instalado. Para gr√°ficos interativos: `pip install plotly`")

# P√°gina principal baseada na sele√ß√£o
if page == "C√°lculo SPF":
    st.header("üîç C√°lculo do Fator de Prote√ß√£o Solar (SPF)")
    
    # Upload do arquivo
    uploaded_file = st.file_uploader("üì§ Carregue dados pr√©-irradia√ß√£o (Excel/CSV)", 
                                   type=["xlsx", "csv"], 
                                   key="spf_upload")
    
    if uploaded_file:
        st.success(f"‚úÖ Arquivo carregado: {uploaded_file.name}")
        
        # Debug: mostrar conte√∫do bruto do arquivo
        with st.expander("üîç Visualizar conte√∫do original do arquivo"):
            try:
                if uploaded_file.name.endswith('xlsx'):
                    raw_df = pd.read_excel(uploaded_file)
                else:
                    raw_df = pd.read_csv(uploaded_file)
                st.write("üìã **Conte√∫do original (primeiras 5 linhas):**")
                st.dataframe(raw_df.head())
                st.write(f"üìä **Total de linhas:** {len(raw_df)}")
                st.write("üî§ **Colunas originais:**", list(raw_df.columns))
            except Exception as e:
                st.error(f"Erro ao ler arquivo: {e}")
        
        df, error = load_and_validate_data(uploaded_file, "pre_irradiation")
        
        if error:
            st.error(f"‚ùå Erro ao processar arquivo: {error}")
            
            # Tentativa alternativa de leitura
            st.info("üîÑ Tentando leitura alternativa...")
            try:
                if uploaded_file.name.endswith('xlsx'):
                    alt_df = pd.read_excel(uploaded_file)
                else:
                    alt_df = pd.read_csv(uploaded_file)
                
                st.write("üìã **Estrutura do arquivo:**")
                st.dataframe(alt_df.head(3))
                
                # Tentativa manual de mapeamento
                st.write("üéØ **Sugest√£o de mapeamento manual:**")
                if len(alt_df.columns) >= 4:
                    manual_mapping = {
                        alt_df.columns[0]: 'Comprimento de Onda',
                        alt_df.columns[1]: 'E(Œª)',
                        alt_df.columns[2]: 'I(Œª)', 
                        alt_df.columns[3]: 'A0i(Œª)'
                    }
                    st.write("Mapeamento sugerido:", manual_mapping)
                    
            except Exception as alt_error:
                st.error(f"Erro na leitura alternativa: {alt_error}")
                
        else:
            # Dados processados com sucesso
            st.success("‚úÖ Arquivo processado com sucesso!")
            
            # Mostrar dados
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìä Dados processados")
                st.dataframe(df.head(), use_container_width=True)
            
            with col2:
                st.subheader("üìà Estat√≠sticas")
                st.metric("Total de pontos", len(df))
                st.metric("Faixa de comprimento de onda", 
                         f"{df['Comprimento de Onda'].min()} - {df['Comprimento de Onda'].max()} nm")
                st.metric("Absorb√¢ncia m√°xima", f"{df['A0i(Œª)'].max():.3f}")
                st.metric("Absorb√¢ncia m√≠nima", f"{df['A0i(Œª)'].min():.3f}")
            
            # C√°lculo do SPF
            try:
                with st.spinner("üßÆ Calculando SPF..."):
                    spf = calculate_spf(df)
                
                st.success(f"‚úÖ **SPF in vitro calculado:** {spf:.2f}")
                
                # Ajuste do SPF
                st.subheader("üîß Ajuste do SPF")
                SPF_label = st.slider("SPF rotulado (in vivo)", 
                                    min_value=1.0, max_value=100.0, 
                                    value=30.0, step=0.1,
                                    help="Valor do SPF determinado em testes in vivo")
                
                with st.spinner("‚öôÔ∏è Otimizando coeficiente de ajuste..."):
                    def error_function(C):
                        return abs(calculate_adjusted_spf(df, C) - SPF_label)
                    
                    result = opt.minimize_scalar(error_function, bounds=(0.5, 1.6), method='bounded')
                    C_adjusted = result.x
                    SPF_adjusted = calculate_adjusted_spf(df, C_adjusted)
                
                # Resultados
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("SPF In Vitro", f"{spf:.2f}")
                with col2:
                    st.metric("Coeficiente C", f"{C_adjusted:.4f}",
                             help="Coeficiente que ajusta o SPF in vitro para in vivo")
                with col3:
                    st.metric("SPF Ajustado", f"{SPF_adjusted:.2f}", 
                             f"{SPF_adjusted - SPF_label:+.2f}",
                             help="SPF calculado ap√≥s aplica√ß√£o do coeficiente C")
                
                # Visualiza√ß√£o gr√°fica
                st.subheader("üìà Visualiza√ß√£o dos Dados")
                
                plot_type = st.radio("Tipo de visualiza√ß√£o:", 
                                    ["Absorb√¢ncia", "Fun√ß√µes de Pondera√ß√£o"], 
                                    horizontal=True)
                
                if plot_type == "Absorb√¢ncia":
                    fig = create_advanced_plots(df, "absorbance")
                else:
                    fig = create_advanced_plots(df, "weighting_functions")
                
                st.pyplot(fig)
                
                # Bot√£o para salvar an√°lise
                analysis_name = st.text_input("üíæ Nome para salvar esta an√°lise:", 
                                           value=f"An√°lise_{datetime.now().strftime('%Y%m%d_%H%M')}")
                
                if st.button("üíæ Salvar An√°lise"):
                    results = {
                        'spf': spf,
                        'spf_adjusted': SPF_adjusted,
                        'C_value': C_adjusted,
                        'spf_labelled': SPF_label
                    }
                    save_to_history(analysis_name, results, datetime.now())
                    st.success(f"‚úÖ An√°lise '{analysis_name}' salva no hist√≥rico!")
                
            except Exception as calc_error:
                st.error(f"‚ùå Erro no c√°lculo: {calc_error}")

elif page == "An√°lise UVA":
    st.header("üåû An√°lise de Prote√ß√£o UVA")
    st.info("Funcionalidade em desenvolvimento...")
    
elif page == "M√©tricas Avan√ßadas":
    st.header("üî¨ M√©tricas Avan√ßadas")
    
    if 'uploaded_data' in st.session_state and st.session_state.uploaded_data['pre_irrad'] is not None:
        df = st.session_state.uploaded_data['pre_irrad']
        
        # Critical Wavelength
        cw = calculate_critical_wavelength(df)
        
        # Exibi√ß√£o dos resultados
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Comprimento de Onda Cr√≠tico (nm)", f"{cw:.1f}",
                     "Bom (‚â•370 nm)" if cw >= 370 else "Abaixo do recomendado")
        
        # Visualiza√ß√£o do Critical Wavelength
        st.subheader("üìä An√°lise do Comprimento de Onda Cr√≠tico")
        
        df_uv = df[(df['Comprimento de Onda'] >= 290) & 
                  (df['Comprimento de Onda'] <= 400)].copy()
        
        wavelengths = df_uv['Comprimento de Onda'].to_numpy()
        absorbance = df_uv['A0i(Œª)'].to_numpy()
        
        # Calcular √°rea cumulativa
        cumulative_area = np.zeros_like(absorbance)
        for i in range(1, len(absorbance)):
            segment_area = (absorbance[i] + absorbance[i-1])/2 * (wavelengths[i] - wavelengths[i-1])
            cumulative_area[i] = cumulative_area[i-1] + segment_area
        
        total_area = cumulative_area[-1]
        target_area = 0.9 * total_area
        
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # Absorb√¢ncia
        ax.plot(wavelengths, absorbance, label='Absorb√¢ncia', linewidth=2.5, color='#1f77b4')
        ax.set_xlabel('Comprimento de Onda (nm)')
        ax.set_ylabel('Absorb√¢ncia', color='#1f77b4')
        ax.tick_params(axis='y', labelcolor='#1f77b4')
        
        # √Årea cumulativa
        ax2 = ax.twinx()
        ax2.plot(wavelengths, cumulative_area, label='√Årea Cumulativa', linewidth=2, color='#ff7f0e', linestyle='--')
        ax2.set_ylabel('√Årea Cumulativa', color='#ff7f0e')
        ax2.tick_params(axis='y', labelcolor='#ff7f0e')
        
        # Linha do Critical Wavelength
        ax.axvline(x=cw, color='red', linestyle=':', linewidth=2, label=f'Œªc = {cw:.1f} nm')
        ax2.axhline(y=target_area, color='green', linestyle=':', linewidth=2, label='90% da √°rea total')
        
        ax.set_title("An√°lise do Comprimento de Onda Cr√≠tico")
        ax.legend(loc='upper left')
        ax2.legend(loc='upper right')
        ax.grid(True, alpha=0.3)
        
        st.pyplot(fig)
        
    else:
        st.warning("Por favor, carregue os dados na aba 'C√°lculo SPF' primeiro")

elif page == "Comparativo":
    st.header("üìä Comparativo entre An√°lises")
    
    if not st.session_state.analysis_history:
        st.info("Nenhuma an√°lise salva no hist√≥rico ainda.")
    else:
        # Criar DataFrame para compara√ß√£o
        comparison_data = []
        for analysis in st.session_state.analysis_history:
            comparison_data.append({
                'An√°lise': analysis['name'],
                'Data': analysis['timestamp'].strftime('%Y-%m-%d %H:%M'),
                'SPF': analysis['data_preview']['spf'],
                'SPF Ajustado': analysis['data_preview']['spf_adjusted'],
                'Coeficiente C': analysis['data_preview']['C_value']
            })
        
        df_comparison = pd.DataFrame(comparison_data)
        st.dataframe(df_comparison.style.highlight_max(axis=0, color='#90EE90'), use_container_width=True)
        
        # Gr√°fico comparativo
        if len(st.session_state.analysis_history) > 1:
            fig, ax = plt.subplots(figsize=(12, 6))
            
            analyses = [a['name'] for a in st.session_state.analysis_history]
            spf_values = [a['data_preview']['spf'] for a in st.session_state.analysis_history]
            adjusted_values = [a['data_preview']['spf_adjusted'] for a in st.session_state.analysis_history]
            
            x = np.arange(len(analyses))
            width = 0.35
            
            ax.bar(x - width/2, spf_values, width, label='SPF In Vitro', alpha=0.8)
            ax.bar(x + width/2, adjusted_values, width, label='SPF Ajustado', alpha=0.8)
            
            ax.set_xlabel('An√°lises')
            ax.set_ylabel('Valor do SPF')
            ax.set_title('Compara√ß√£o entre An√°lises')
            ax.set_xticks(x)
            ax.set_xticklabels(analyses, rotation=45, ha='right')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            st.pyplot(fig)

elif page == "Explica√ß√£o das Equa√ß√µes":
    st.header("üìö Explica√ß√£o das Equa√ß√µes Matem√°ticas")
    
    st.markdown("""
    ## üìä Equa√ß√µes Principais
    
    ### 1. C√°lculo do SPF in vitro
    """)
    
    st.latex(r'''
    SPF = \frac{\sum_{290}^{400} E(\lambda) \times I(\lambda) \times \Delta\lambda}
    {\sum_{290}^{400} E(\lambda) \times I(\lambda) \times T(\lambda) \times \Delta\lambda}
    ''')
    
    st.markdown("""
    **Onde:**
    - $E(\lambda)$ = Efici√™ncia relativa de produ√ß√£o de eritema
    - $I(\lambda)$ = Intensidade spectral da luz solar  
    - $T(\lambda)$ = Transmit√¢ncia da amostra ($T = 10^{-A(\lambda)}$)
    - $A(\lambda)$ = Absorb√¢ncia da amostra
    - $\Delta\lambda$ = Intervalo entre comprimentos de onda (1 nm)
    """)
    
    st.markdown("""
    ### 2. SPF Ajustado com Coeficiente C
    """)
    
    st.latex(r'''
    SPF_{\text{ajustado}} = \frac{\sum E(\lambda) \times I(\lambda) \times \Delta\lambda}
    {\sum E(\lambda) \times I(\lambda) \times 10^{-A(\lambda) \times C} \times \Delta\lambda}
    ''')
    
    st.markdown("""
    **Onde:**
    - $C$ = Coeficiente de ajuste que correlaciona o SPF in vitro com o SPF in vivo
    """)
    
    st.markdown("""
    ### 3. Comprimento de Onda Cr√≠tico ($\lambda_c$)
    """)
    
    st.latex(r'''
    \lambda_c = \min \left\{ \lambda \middle| \int_{290}^{\lambda} A(\lambda)  d\lambda \geq 0.9 \times \int_{290}^{400} A(\lambda)  d\lambda \right\}
    ''')
    
    st.markdown("""
    **Interpreta√ß√£o:**
    - $\lambda_c \geq 370$ nm indica boa prote√ß√£o UVA
    - Valores abaixo de 370 nm sugerem prote√ß√£o UVA insuficiente
    """)

# Rodap√©
st.markdown("---")
st.markdown("""
**üî¨ Desenvolvido para an√°lise de prote√ß√£o solar**  
*Sistema compat√≠vel com diversos formatos de dados*
""")
