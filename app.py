import streamlit as st

# Configura√ß√£o da p√°gina DEVE SER A PRIMEIRA INSTRU√á√ÉO
st.set_page_config(
    page_title="An√°lise de Prote√ß√£o Solar",
    page_icon="üåû",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Agora os outros imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as opt
from datetime import datetime

# Verificar e importar Plotly com fallback
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

# Sistema de sess√£o para armazenar dados
if 'uploaded_data' not in st.session_state:
    st.session_state.uploaded_data = {
        'pre_irrad': None,
        'post_irrad': None,
        'metadata': {}
    }

if 'analysis_history' not in st.session_state:
    st.session_state.analysis_history = []

# Fun√ß√£o para mapear nomes de colunas - CORRIGIDA
def map_column_names(df):
    """Mapeia nomes de colunas para um formato padr√£o"""
    column_mapping = {}
    
    # Mapear comprimento de onda - CORRE√á√ÉO PRINCIPAL
    for col in df.columns:
        lower_col = col.lower().strip()
        # Verifica v√°rias possibilidades
        if any(word in lower_col for word in ['comprimento', 'onda', 'wavelength', 'lambda', 'nm']):
            column_mapping[col] = 'Comprimento de Onda'
            break
    else:
        # Se n√£o encontrou, usa a primeira coluna
        column_mapping[df.columns[0]] = 'Comprimento de Onda'
    
    # Mapear absorb√¢ncia
    absorbance_aliases = ['absorbancia', 'absorvancia', 'absorb√¢ncia', 'absorv√¢ncia', 'abs', 'a0i']
    for col in df.columns:
        lower_col = col.lower()
        if any(alias in lower_col for alias in absorbance_aliases):
            column_mapping[col] = 'A0i(Œª)'
            break
    else:
        # Se n√£o encontrou, tenta encontrar por padr√£o
        for col in df.columns:
            lower_col = col.lower()
            if 'abs' in lower_col:
                column_mapping[col] = 'A0i(Œª)'
                break
    
    # Mapear E(Œª)
    eritema_aliases = ['e(Œª)', 'e(lambda)', 'eritema', 'erythema', 'e(', 'e ']
    for col in df.columns:
        lower_col = col.lower()
        if any(alias in lower_col for alias in eritema_aliases):
            column_mapping[col] = 'E(Œª)'
            break
    
    # Mapear I(Œª)
    intensity_aliases = ['i(Œª)', 'i(lambda)', 'intensidade', 'intensity', 'i ']
    for col in df.columns:
        lower_col = col.lower()
        if any(alias in lower_col for alias in intensity_aliases):
            column_mapping[col] = 'I(Œª)'
            break
    
    return column_mapping

# Fun√ß√µes de c√°lculo
def calculate_spf(df):
    """Calcula SPF in vitro conforme Equa√ß√£o 1"""
    d_lambda = 1
    E = df['E(Œª)'].to_numpy()
    I = df['I(Œª)'].to_numpy()
    A0i = df['A0i(Œª)'].to_numpy()
    T = 10 ** (-A0i)
    
    numerator = np.sum(E * I * d_lambda)
    denominator = np.sum(E * I * T * d_lambda)
    
    if denominator == 0:
        raise ValueError("Denominator cannot be zero")
    return numerator / denominator

def calculate_adjusted_spf(df, C):
    """Calcula SPF ajustado conforme Equa√ß√£o 2"""
    d_lambda = 1
    E = df['E(Œª)'].to_numpy()
    I = df['I(Œª)'].to_numpy()
    A0i = df['A0i(Œª)'].to_numpy()
    
    numerator = np.sum(E * I * d_lambda)
    denominator = np.sum(E * I * (10 ** (-A0i * C)) * d_lambda)
    
    if denominator == 0:
        raise ValueError("Denominator cannot be zero")
    return numerator / denominator

def calculate_uva_pf(df, C):
    """Calcula UVA-PF"""
    d_lambda = 1
    P = df['P(Œª)'].to_numpy()
    I = df['I(Œª)'].to_numpy()
    A0i = df['A0i(Œª)'].to_numpy()
    
    numerator = np.sum(P * I * d_lambda)
    denominator = np.sum(P * I * (10 ** (-A0i * C)) * d_lambda)
    
    if denominator == 0:
        raise ValueError("Denominator cannot be zero")
    return numerator / denominator

def calculate_critical_wavelength(df):
    """Calcula Critical Wavelength"""
    df_uv = df[(df['Comprimento de Onda'] >= 290) & 
              (df['Comprimento de Onda'] <= 400)].copy()
    
    wavelengths = df_uv['Comprimento de Onda'].to_numpy()
    absorbance = df_uv['A0i(Œª)'].to_numpy()
    
    total_area = np.trapz(absorbance, wavelengths)
    target_area = 0.9 * total_area
    
    cumulative_area = 0
    for i, (wl, abs_val) in enumerate(zip(wavelengths, absorbance)):
        if i == 0:
            continue
        segment_area = (abs_val + absorbance[i-1])/2 * (wl - wavelengths[i-1])
        cumulative_area += segment_area
        
        if cumulative_area >= target_area:
            return wl
    
    return 400

# Fun√ß√£o para carregar e validar dados
def load_and_validate_data(uploaded_file):
    """Carrega e valida os dados do arquivo com mapeamento de colunas"""
    try:
        if uploaded_file.name.endswith('xlsx'):
            df = pd.read_excel(uploaded_file)
        else:
            df = pd.read_csv(uploaded_file)
        
        df.columns = df.columns.str.strip()
        
        # Mapear nomes de colunas
        column_mapping = map_column_names(df)
        df = df.rename(columns=column_mapping)
        
        # Verificar colunas necess√°rias
        required_cols = ['Comprimento de Onda', 'E(Œª)', 'I(Œª)', 'A0i(Œª)']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            raise ValueError(f"Colunas faltando ap√≥s mapeamento: {', '.join(missing_cols)}")
            
        return df, None
        
    except Exception as e:
        return None, str(e)

# LOGOS NO TOPO
col1, col2 = st.columns([1, 0.5])
with col1:
    st.image("https://via.placeholder.com/200x80/FF9900/000000?text=MEU+LAB", width=200)
with col2:
    st.image("https://via.placeholder.com/200x80/0066CC/FFFFFF?text=UFSC", width=200)

# T√çTULO PRINCIPAL
st.title("üåû An√°lise Completa de Prote√ß√£o Solar")

# Menu lateral para navega√ß√£o
with st.sidebar:
    st.image("https://via.placeholder.com/150x50/FF9900/000000?text=LOGO", width=150)
    st.title("Navega√ß√£o")
    page = st.radio("Selecione a p√°gina:", 
                   ["C√°lculo SPF", "An√°lise UVA", "M√©tricas Avan√ßadas", "Explica√ß√£o das Equa√ß√µes"])
    
    st.markdown("---")
    st.info("""
    **Instru√ß√µes:**
    1. Fa√ßa upload dos dados
    2. Configure os par√¢metros
    3. Visualize os resultados
    """)

# P√°gina principal baseada na sele√ß√£o
if page == "C√°lculo SPF":
    st.header("üîç C√°lculo do Fator de Prote√ß√£o Solar (SPF)")
    
    # Upload do arquivo
    uploaded_file = st.file_uploader("Carregue dados pr√©-irradia√ß√£o (Excel/CSV)", 
                                   type=["xlsx", "csv"], 
                                   key="spf_upload")
    
    if uploaded_file:
        df, error = load_and_validate_data(uploaded_file)
        
        if error:
            st.error(f"Erro ao processar arquivo: {error}")
            st.info("""
            **Formato esperado:** Seu arquivo deve conter colunas para:
            - Comprimento de Onda (nm)
            - E(Œª) [Eritema]
            - I(Œª) [Intensidade]
            - Absorb√¢ncia [pode ser chamada de Absorbancia, Absorvancia, etc.]
            """)
        else:
            # Mostrar preview dos dados
            st.subheader("üìã Dados processados (primeiras linhas)")
            st.dataframe(df.head(), use_container_width=True)
            
            # C√°lculo do SPF
            try:
                spf = calculate_spf(df)
                st.success(f"üìä SPF in vitro calculado: {spf:.2f}")
                
                # Ajuste do SPF
                st.subheader("üîß Ajuste do SPF")
                SPF_label = st.number_input("SPF rotulado (in vivo)", 
                                         min_value=1.0, value=30.0, step=0.1)
                
                # Otimiza√ß√£o para encontrar C
                def error_function(C):
                    return abs(calculate_adjusted_spf(df, C) - SPF_label)
                
                result = opt.minimize_scalar(error_function, bounds=(0.5, 1.6), method='bounded')
                C_adjusted = result.x
                SPF_adjusted = calculate_adjusted_spf(df, C_adjusted)
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Coeficiente de Ajuste (C)", f"{C_adjusted:.4f}")
                with col2:
                    st.metric("SPF Ajustado", f"{SPF_adjusted:.2f}")
                
                # Visualiza√ß√£o
                st.subheader("üìà Visualiza√ß√£o dos Dados")
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.plot(df['Comprimento de Onda'], df['A0i(Œª)'], label='Absorb√¢ncia', linewidth=2)
                ax.plot(df['Comprimento de Onda'], df['E(Œª)'], label='E(Œª) - Eritema', linewidth=2)
                ax.plot(df['Comprimento de Onda'], df['I(Œª)'], label='I(Œª) - Intensidade', linewidth=2)
                ax.set_xlabel('Comprimento de Onda (nm)')
                ax.set_ylabel('Valores')
                ax.set_title("Dados Pr√©-Irradia√ß√£o")
                ax.legend()
                ax.grid(True)
                st.pyplot(fig)
                
            except ValueError as e:
                st.error(f"Erro no c√°lculo: {str(e)}")

elif page == "An√°lise UVA":
    st.header("üåû An√°lise de Prote√ß√£o UVA")
    st.info("Funcionalidade em desenvolvimento...")

elif page == "M√©tricas Avan√ßadas":
    st.header("üî¨ M√©tricas Avan√ßadas")
    st.info("Funcionalidade em desenvolvimento...")

elif page == "Explica√ß√£o das Equa√ß√µes":
    st.header("üìö Explica√ß√£o das Equa√ß√µes Matem√°ticas")
    
    st.markdown("""
    ## üìä Equa√ß√µes Principais
    
    ### 1. C√°lculo do SPF in vitro
    """)
    
    st.latex(r'''
    SPF = \frac{\sum_{290}^{400} E(\lambda) \times I(\lambda) \times \Delta\lambda}
    {\sum_{290}^{400} E(\lambda) \times I(\lambda) \times T(\lambda) \times \Delta\lambda}
    ''')
    
    st.markdown("""
    **Onde:**
    - $E(\lambda)$ = Efici√™ncia relativa de produ√ß√£o de eritema
    - $I(\lambda)$ = Intensidade spectral da luz solar  
    - $T(\lambda)$ = Transmit√¢ncia da amostra ($T = 10^{-A(\lambda)}$)
    - $A(\lambda)$ = Absorb√¢ncia da amostra
    - $\Delta\lambda$ = Intervalo entre comprimentos de onda (1 nm)
    """)
    
    st.markdown("""
    ### 2. SPF Ajustado com Coeficiente C
    """)
    
    st.latex(r'''
    SPF_{\text{ajustado}} = \frac{\sum E(\lambda) \times I(\lambda) \times \Delta\lambda}
    {\sum E(\lambda) \times I(\lambda) \times 10^{-A(\lambda) \times C} \times \Delta\lambda}
    ''')
    
    st.markdown("""
    **Onde:**
    - $C$ = Coeficiente de ajuste que correlaciona o SPF in vitro com o SPF in vivo
    """)

# Rodap√©
st.markdown("---")
st.markdown("""
**Desenvolvido para an√°lise de prote√ß√£o solar**  
*Sistema compat√≠vel com diversos formatos de dados*
""")

# Avisos de depend√™ncias
if not PLOTLY_AVAILABLE:
    st.sidebar.warning("Plotly n√£o est√° instalado. Para gr√°ficos interativos: `pip install plotly`")
